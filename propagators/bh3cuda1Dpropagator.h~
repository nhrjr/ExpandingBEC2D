#ifndef BH3CUDA1DPROPAGATOR_H__
#define BH3CUDA1DPROPAGATOR_H__

#include <curand.h>

#include "cudacomplexgrid.h"
#include "bh3propagator.h"

class Bh3Cuda1DPropagator : public Bh3Propagator {
	protected:
		CudaComplexGrid *dev_grid1;
        CudaComplexGrid *dev_grid2;
        CudaComplexGrid *randGrid;
        CudaComplexGrid *dev_kprop;
        
        curandGenerator_t gen;
                
        std::vector<ComplexGrid> rgrid1;
        std::vector<ComplexGrid> rgrid2;
        

	public:
		Bh3Cuda1DPropagator(const PathOptions &opt, const ComplexGrid &start1, const ComplexGrid &start2, const runmode m, double (*qunech_scd) (const PathOptions &, double));

        const std::vector<ComplexGrid> &getwhichRGrids(uint32_t c) const;
        
        bool start(const std::vector<double> &snapshots, const std::string &filename);
		virtual ~Bh3Cuda1DPropagator();
		
	protected:
        bool propagateN(int N);
		bool propagate1();
        bool propagate1(double Omega);
        double (*get_omega) (const PathOptions &opt, double time);
        
       
};


inline const std::vector<ComplexGrid> &Bh3Cuda1DPropagator::getwhichRGrids(uint32_t c) const
{
    if (c == 0)
        return rgrid1;
    else
        return rgrid2;
}


#endif
